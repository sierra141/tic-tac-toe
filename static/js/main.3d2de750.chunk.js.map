{"version":3,"sources":["components/Square.js","components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Square","props","className","onClick","value","calculateWinner","squares","winningLines","i","length","a","b","c","Board","status","useState","Array","fill","boardSquares","setBoardSquares","xIsNext","setXIsNext","renderSquare","index","e","handleClick","winner","includes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAMeA,EANA,SAACC,GACZ,OACI,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SAAoDF,EAAMG,SC+C5DC,EAAkB,SAACC,GAYrB,IAXA,IAAMC,EAAe,CACjB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGFC,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IAAK,CAAC,IAAD,cACxBD,EAAaC,GADW,GACnCE,EADmC,KAChCC,EADgC,KAC7BC,EAD6B,KAE1C,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQK,KAAOL,EAAQM,GAClE,OAAON,EAAQI,GAGvB,OAAQ,MAIGG,EAnED,WAAO,IAsBbC,EAtBY,EAEwBC,mBAASC,MAAM,GAAGC,KAAK,OAF/C,mBAETC,EAFS,KAEKC,EAFL,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,KAkBVC,EAAe,SAACC,GAClB,OAAO,cAAC,EAAD,CAAQnB,MAAQc,EAAaK,GAAQpB,QAAS,SAACqB,GAAD,OAdrC,SAAAD,GAChB,IAAMjB,EAAO,YAAOY,GAChBb,EAAgBa,IAAiBZ,EAAQiB,KAC7CjB,EAAQiB,GAASH,EAAU,IAAM,IACjCD,EAAgBb,GAChBe,GAAYD,IASgDK,CAAYF,OAItEG,EAASrB,EAAgBa,GAS/B,OAJIJ,EAHCI,EAAaS,SAAS,OAAmB,MAAVD,EAGvBA,EAAM,qBAAiBA,GAAjB,uBAA4CN,EAAU,IAAM,KAFlE,MAOT,sBAAKlB,UAAU,OAAf,UACI,sBAAKA,UAAU,YAAf,UAA4BoB,EAAa,GAAIA,EAAa,GAAIA,EAAa,MAC3E,sBAAKpB,UAAU,YAAf,UAA4BoB,EAAa,GAAIA,EAAa,GAAIA,EAAa,MAC3E,sBAAKpB,UAAU,YAAf,UAA4BoB,EAAa,GAAIA,EAAa,GAAIA,EAAa,MAC3E,qBAAKpB,UAAU,SAAf,SAAyBY,IACzB,wBAAQZ,UAAU,YAAYC,QAzBnB,WACfgB,EAAgBH,MAAM,GAAGC,KAAK,OAC9BI,GAAW,IAuBP,0BC1BGO,MAbf,WACE,OACE,sBAAK1B,UAAU,MAAf,UACE,wBAAQA,UAAU,eAGlB,oBAAIA,UAAU,aAAd,yBACA,cAAC,EAAD,QCES2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3d2de750.chunk.js","sourcesContent":["const Square = (props) => {\r\n    return (\r\n        <button className=\"square\" onClick={props.onClick}>{props.value}</button>\r\n    )\r\n}\r\n\r\nexport default Square\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { useState } from 'react'\r\nimport Square from './Square'\r\n\r\n\r\nconst Board = () => {\r\n\r\n    const [boardSquares, setBoardSquares] = useState(Array(9).fill(null))\r\n    const [xIsNext, setXIsNext] = useState(true)\r\n\r\n    const handleClick = index => {\r\n        const squares = [...boardSquares]\r\n        if (calculateWinner(boardSquares) || squares[index]) return;\r\n        squares[index] = xIsNext ? \"X\" : \"O\"\r\n        setBoardSquares(squares)\r\n        setXIsNext(!xIsNext)\r\n    }\r\n\r\n    const resetBoard = () => {\r\n        setBoardSquares(Array(9).fill(null))\r\n        setXIsNext(true)\r\n    }\r\n\r\n    const renderSquare = (index) => {\r\n        return <Square value ={boardSquares[index]} onClick={(e) => handleClick(index)}/>\r\n    }\r\n\r\n    let status;\r\n    const winner = calculateWinner(boardSquares)\r\n\r\n    if (!boardSquares.includes(null) && winner == null){\r\n        status = \"Tie\"\r\n    } else {\r\n        status = winner ? `Winner is: ${winner}` : `Next player: ${xIsNext ? \"X\" : \"O\"}`\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <div className=\"board-row\">{renderSquare(0)}{renderSquare(1)}{renderSquare(2)}</div>\r\n            <div className=\"board-row\">{renderSquare(3)}{renderSquare(4)}{renderSquare(5)}</div>\r\n            <div className=\"board-row\">{renderSquare(6)}{renderSquare(7)}{renderSquare(8)}</div>\r\n            <div className=\"status\">{status}</div>\r\n            <button className=\"reset-btn\" onClick = {resetBoard}>New Game</button>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\nconst calculateWinner = (squares) => {\r\n    const winningLines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ]\r\n\r\n    for (let i = 0; i < winningLines.length; i++) {\r\n        const [a, b, c] = winningLines[i]\r\n        if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]){\r\n            return squares[a]\r\n        }\r\n    }\r\n    return (null)\r\n}\r\n\r\n\r\nexport default Board\r\n\r\n\r\n","import './App.css';\nimport Board from './components/Board'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n  \n      </header>\n      <h2 className=\"main-title\">Tic Tac Toe</h2>\n      <Board />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}